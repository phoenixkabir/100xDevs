Approach: The idea is to store the top k elements with maximum frequency. To store them a vector or an array can be used.
 To keep the track of frequencies of elements creates a HashMap to store element-frequency pairs. Given a stream of numbers, 
 when a new element appears in the stream update the frequency of that element in HashMap and put that element at the end of 
 the list of K numbers (total k+1 elements) now compare adjacent elements of the list and swap if higher frequency element is 
 stored next to it.

Algorithm: 

Create a Hashmap hm, and an array of k + 1 length.
Traverse the input array from start to end.
Insert the element at k+1 th position of the array, and update the frequency of that element in HashMap.
Now, iterate from the position of element to zero.
For very element, compare the frequency and swap if a higher frequency element is stored next to it, if the frequency is the same
 then the swap is the next element is greater.
print the top k element in each traversal of the original array.


```cpp
// C++ program to find top k elements in a stream
#include <bits/stdc++.h>
using namespace std;

// Function to print top k numbers
void kTop(int a[], int n, int k)
{
	// vector of size k+1 to store elements
	vector<int> top(k + 1);

	// array to keep track of frequency
	unordered_map<int, int> freq;

	// iterate till the end of stream
	for (int m = 0; m < n; m++) {
		// increase the frequency
		freq[a[m]]++;

		// store that element in top vector
		top[k] = a[m];

		// search in top vector for same element
		auto it = find(top.begin(), top.end() - 1, a[m]);

		// iterate from the position of element to zero
		for (int i = distance(top.begin(), it) - 1; i >= 0; --i) {
			// compare the frequency and swap if higher
			// frequency element is stored next to it
			if (freq[top[i]] < freq[top[i + 1]])
				swap(top[i], top[i + 1]);

			// if frequency is same compare the elements
			// and swap if next element is high
			else if ((freq[top[i]] == freq[top[i + 1]])
					&& (top[i] > top[i + 1]))
				swap(top[i], top[i + 1]);
			else
				break;
		}

		// print top k elements
		for (int i = 0; i < k && top[i] != 0; ++i)
			cout << top[i] << ' ';
	}
	cout << endl;
}

// Driver program to test above function
int main()
{
	int k = 4;
	int arr[] = { 5, 2, 1, 3, 2 };
	int n = sizeof(arr) / sizeof(arr[0]);
	kTop(arr, n, k);
	return 0;
}

```

Complexity Analysis: 

Time Complexity: O( n * k ). 
In each traversal the temp array of size k is traversed, So the time Complexity is O( n * k ).
Space Complexity: O(n). 
To store the elements in HashMap O(n) space is required.